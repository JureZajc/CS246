# -*- coding: utf-8 -*-
"""CS246-2.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bl09GSbJB7azgKsAxyap-UxL04w5MvVO

Must needed setup before every assignment
"""

!pip install pyspark
!pip install -U -q PyDrive
!apt install openjdk-8-jdk-headless -qq
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

"""Imports"""

import itertools
from pyspark import SparkContext, SparkConf
from pyspark.sql import *
#from pyspark.sql.functions import * it overrides abs if we do it like that
import re, sys, pickle
from functools import reduce
import pyspark.sql.functions as F
import matplotlib.pyplot as pl

"""Setup Spark"""

# create the Spark Session
spark = SparkSession.builder.getOrCreate()

# create the Spark Context
sc = spark.sparkContext

"""Definitions"""

#Euclidian
def l22(u, v):
    delta = [u[i] - v[i] for i in range(len(u))]
    return reduce(lambda a, b: a + b * b, delta, 0)
#Manhattan
def l1(u, v):
    delta = [u[i] - v[i] for i in range(len(u))]
    return reduce(lambda a, b: a + abs(b), delta, 0)

def findCentroid(pt, cens, distFcn, phi):
    best = float('inf')
    besti = None
    for i, cen in enumerate(cens.value):
        cand = distFcn(pt, cen)
        if cand < best:
            best = cand
            besti = i
    phi += best
    return besti, pt

def aggregate_UV(cumulative, pt):
    cumulative_pt, cumulative_cnt = cumulative
    for i in range(len(pt)):
        cumulative_pt[i] += pt[i]
    return cumulative_pt, cumulative_cnt + 1

def aggregate_UU(a, b):
    a_pt, a_cnt = a
    b_pt, b_cnt = b
    for i in range(len(a_pt)):
        a_pt[i] += b_pt[i]
    return a_pt, a_cnt + b_cnt

"""Output"""

#We need to make each and every combination (c1 - l1, c1 -l22, c2 - l1 and c2 - l22)
#I kept same name of variables so for easier commenting and uncommenting
dataFile = 'data.txt'
censFile = 'c1.txt' #we need to comment and uncomment which one we wan't to use
#censFile = 'c2.txt'
distFcn = l1 #Manhattan
distFcn = l22 #Euclidian
outFile = 'dist_' + distFcn.__name__ + '__' + censFile

MAX_ITER = 20 #max iterations
k = 10 #clusters
NDATA = 4601
NDIM = 58
cens = []


# init centroids - py way :D
cens = []
with open(censFile) as fh:
    for line in fh:
        if not line:
            continue
        cens.append(list(map(float, line.split())))

cens = sc.broadcast(cens)

# load data
data = sc.textFile( dataFile)
data = data.map(lambda l: list(map(float, l.split())))

phi = sc.accumulator(0)
totCosts = []

for it in range(1, MAX_ITER + 1):
    print('\n' * 6 + 'iteration %d' % it + '\n' * 6)

    i_pt = data.map(lambda pt: findCentroid(pt, cens, distFcn, phi))
    
    # M: calc new centroid
    i_sumCoors_cnt = i_pt.aggregateByKey(([0] * NDIM, 0),
                                         aggregate_UV, aggregate_UU)
    i_sumCoors_cnt = i_sumCoors_cnt.collect()
    newCens = [None] * k
    for i, sumCoors_cnt in i_sumCoors_cnt:
        sumCoors, cnt = sumCoors_cnt
        newCens[i] = [sumCoors[j] / cnt for j in range(len(sumCoors))]
    assert not any([cen is None for cen in newCens])

    # record cost, prep new iter
    totCosts.append(phi.value)
    phi.value = 0
    cens.unpersist()
    cens = sc.broadcast(newCens)

print('\n' * 6 + '%f\n' * MAX_ITER % tuple(totCosts) + '\n' * 6 )
with open(outFile, 'wb') as fh:
    pickle.dump(totCosts, fh)

"""Plotting the results"""

pl.close('all')

with open('dist_l1__c1.txt', 'rb') as fh:
    l1c1 = pickle.load(fh)
with open('dist_l1__c2.txt', 'rb') as fh:
    l1c2 = pickle.load(fh)
with open('dist_l22__c1.txt', 'rb') as fh:
    l22c1 = pickle.load(fh)
with open('dist_l22__c2.txt', 'rb') as fh:
    l22c2 = pickle.load(fh)

pl.title("Manhattan Distance")
pl.plot(l1c1, label='c1')
pl.plot(l1c2, label='c2')
pl.xlabel("Iteration #")
pl.ylabel("Total Cost")
pl.legend()
pl.savefig('plotManhattan.png', dpi=300, bbox_inches='tight')

pl.figure()
pl.title("Euclidian Distance c1")
pl.plot(l22c1, label='c1')
pl.xlabel("Iteration #")
pl.ylabel("Total Cost")
pl.legend()
pl.savefig('plotEuclidianC1.png', dpi=300, bbox_inches='tight')
pl.figure()
pl.title("Euclidian Distance c2")
pl.plot(l22c2, label='c2')
pl.xlabel("Iteration #")
pl.ylabel("Total Cost")
pl.legend()
pl.savefig('plotEuclidianC2.png', dpi=300, bbox_inches='tight')


def change(L):
    return (L[0] - L[10]) / L[0]

print('Euclidian c1', change(l22c1))
print('Euclidian c2', change(l22c2))
print('Manhattan c1', change(l1c1))
print('Manhattan c2', change(l1c2))